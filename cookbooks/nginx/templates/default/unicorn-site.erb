upstream <%= "#{@name}_app_server" %> {
  server unix:<%= @socket_path %> fail_timeout=0;
}

server {
  listen   <%= @port %>;
  server_name  <%= node[:hostname] %>;

  access_log  <%= node[:nginx][:log_dir] %>/localhost.access.log;

  root  <%= @app_root %>/current/public;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  #
  # try_files directive appeared in in nginx 0.7.27 and has stabilized
  # over time.  Older versions of nginx (e.g. 0.6.x) requires
  # "if (!-f $request_filename)" which was less efficient:
  # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    # proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll stuff.  It's also safe to set if you're
    # using only serving fast clients with Unicorn + nginx.
    # Otherwise you _want_ nginx to buffer responses to slow
    # clients, really.
    # proxy_buffering off;

    proxy_pass http://<%= "#{@name}_app_server" %>;
  }

  # Rails error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root   <%= @app_root %>/current/public;
  }

  #gridfs
  location = /gridfs/ {
    gridfs shopqi;
    mongo 127.0.0.1:27092;
  }
}
